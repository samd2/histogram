name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - develop
      - feature/**
      - test*

env:
  UBSAN_OPTIONS: print_stacktrace=1

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
#           - toolset: gcc-4.7
#             gcov: gcov-4.7
#             cxxstd: "03,11"
#             os: ubuntu-16.04
#             install: g++-4.7
#           - toolset: gcc-4.8
#             gcov: gcov-4.8
#             cxxstd: "03,11"
#             os: ubuntu-16.04
#             install: g++-4.8
#           - toolset: gcc-4.9
#             gcov: gcov-4.9
#             cxxstd: "03,11"
#             os: ubuntu-16.04
#             install: g++-4.9
          - toolset: gcc-5
            gcov: gcov-5
            cxxstd: "03,11,14,1z"
            os: ubuntu-16.04
          - toolset: gcc-6
            gcov: gcov-6
            cxxstd: "03,11,14,1z"
            os: ubuntu-16.04
            install: g++-6
          - toolset: gcc-7
            gcov: gcov-7
            cxxstd: "03,11,14,17"
            os: ubuntu-18.04
          - toolset: gcc-8
            gcov: gcov-8
            cxxstd: "03,11,14,17,2a"
            os: ubuntu-18.04
            install: g++-8
          - toolset: gcc-9
            gcov: gcov-9
            cxxstd: "03,11,14,17,2a"
            os: ubuntu-18.04
          - toolset: gcc-10
            gcov: gcov-10
            cxxstd: "03,11,14,17,2a"
            os: ubuntu-18.04
#           - toolset: clang
#             compiler: clang++-3.5
#             cxxstd: "03,11"
#             os: ubuntu-16.04
#             install: clang-3.5
#           - toolset: clang
#             compiler: clang++-3.6
#             cxxstd: "03,11,14"
#             os: ubuntu-16.04
#             install: clang-3.6
#           - toolset: clang
#             compiler: clang++-3.7
#             cxxstd: "03,11,14"
#             os: ubuntu-16.04
#             install: clang-3.7
#           - toolset: clang
#             compiler: clang++-3.8
#             cxxstd: "03,11,14"
#             os: ubuntu-16.04
#             install: clang-3.8
#           - toolset: clang
#             compiler: clang++-3.9
#             cxxstd: "03,11,14"
#             os: ubuntu-16.04
#             install: clang-3.9
#           - toolset: clang
#             compiler: clang++-4.0
#             cxxstd: "03,11,14"
#             os: ubuntu-16.04
#             install: clang-4.0
#           - toolset: clang
#             compiler: clang++-5.0
#             cxxstd: "03,11,14,1z"
#             os: ubuntu-16.04
#             install: clang-5.0
#           - toolset: clang
#             compiler: clang++-6.0
#             cxxstd: "03,11,14,17"
#             os: ubuntu-18.04
#             install: clang-6.0
          - toolset: clang
            compiler: clang++-7
            gcov: 'gcov_for_clang.sh'
            cxxstd: "03,11,14,17"
            os: ubuntu-18.04
            install: clang-7 llvm
          - toolset: clang
            compiler: clang++-8
            gcov: 'gcov_for_clang.sh'
            cxxstd: "03,11,14,17,2a"
            os: ubuntu-20.04
            install: clang-8 llvm
          - toolset: clang
            compiler: clang++-9
            gcov: 'gcov_for_clang.sh'
            cxxstd: "03,11,14,17,2a"
            os: ubuntu-20.04
            install: llvm
          - toolset: clang
            compiler: clang++-10
            gcov: 'gcov_for_clang.sh'
            cxxstd: "03,11,14,17,2a"
            os: ubuntu-20.04
            install: llvm
          - toolset: clang
            compiler: clang++-11
            gcov: 'gcov_for_clang.sh'
            cxxstd: "03,11,14,17,2a"
            os: ubuntu-20.04
            install: llvm
          - toolset: clang
            cxxstd: "03,11,14,17,2a"
            gcov: 'gcov'
            os: macos-10.15
            install: llvm

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v2

      - name: Install packages
        if: matrix.install
        run: sudo apt install ${{matrix.install}}

      - name: Setup Boost
        run: |
          echo GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          LIBRARY=${GITHUB_REPOSITORY#*/}
          echo LIBRARY: $LIBRARY
          echo "LIBRARY=$LIBRARY" >> $GITHUB_ENV
          echo GITHUB_BASE_REF: $GITHUB_BASE_REF
          echo GITHUB_REF: $GITHUB_REF
          REF=${GITHUB_BASE_REF:-$GITHUB_REF}
          REF=${REF#refs/heads/}
          echo REF: $REF
          BOOST_BRANCH=develop && [ "$REF" == "master" ] && BOOST_BRANCH=master || true
          echo BOOST_BRANCH: $BOOST_BRANCH
          cd ..
          git clone -b $BOOST_BRANCH --depth 1 https://github.com/boostorg/boost.git boost-root
          cd boost-root
          cp -r $GITHUB_WORKSPACE/* libs/$LIBRARY
          git submodule update --init tools/boostdep
          python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" $LIBRARY
          ./bootstrap.sh
          ./b2 -d0 headers

      - name: Create user-config.jam
        if: matrix.compiler
        run: |
          echo "using ${{matrix.toolset}} : : ${{matrix.compiler}} ;" > ~/user-config.jam

# - name: Run tests
#   run: |
#     cd ../boost-root
#     ./b2 -j3 libs/$LIBRARY/test toolset=${{matrix.toolset}} cxxstd=${{matrix.cxxstd}} variant=debug,release

      - name: Test cxxstd=latest coverage=on
        run: |
          cd ../boost-root
          # "merging" histogram's example and core's example:
          ./b2 -j3 libs/$LIBRARY/test//all toolset=${{matrix.toolset}} cxxstd=latest coverage=on
          
          # cd libs/histogram
          # ## don't compile examples in coverage build, coverage must come from tests alone
          # ../../b2 $B2_OPTS toolset=gcc-8 cxxstd=latest coverage=on test//all
  
      - name: Process coverage data
        env:
          GCOV: ${{ matrix.gcov }}
        run: |
          # cd libs/histogram
          cd ../boost-root/libs/histogram
          # GCOV=gcov-8 tools/cov.sh
          tools/cov.sh

#   windows:
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - toolset: msvc-14.1
#             cxxstd: "14,17,latest"
#             addrmd: 32,64
#             os: windows-2016
#           - toolset: msvc-14.2
#             cxxstd: "14,17,latest"
#             addrmd: 32,64
#             os: windows-2019
#           - toolset: gcc
#             cxxstd: "03,11,14,17,2a"
#             addrmd: 64
#             os: windows-2019
# 
#     runs-on: ${{matrix.os}}
# 
#     steps:
#       - uses: actions/checkout@v2
# 
#       - name: Setup Boost
#         shell: cmd
#         run: |
#           echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%
#           for /f %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi
#           echo LIBRARY: %LIBRARY%
#           echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%
#           echo GITHUB_BASE_REF: %GITHUB_BASE_REF%
#           echo GITHUB_REF: %GITHUB_REF%
#           if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%
#           set BOOST_BRANCH=develop
#           for /f %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master
#           echo BOOST_BRANCH: %BOOST_BRANCH%
#           cd ..
#           git clone -b %BOOST_BRANCH% --depth 1 https://github.com/boostorg/boost.git boost-root
#           cd boost-root
#           xcopy /s /e /q %GITHUB_WORKSPACE% libs\%LIBRARY%\
#           git submodule update --init tools/boostdep
#           python tools/boostdep/depinst/depinst.py --git_args "--jobs 3" %LIBRARY%
#           cmd /c bootstrap
#           b2 -d0 headers
# 
#       - name: Run tests
#         shell: cmd
#         run: |
#           cd ../boost-root
#           b2 -j3 libs/%LIBRARY%/test toolset=${{matrix.toolset}} cxxstd=${{matrix.cxxstd}} address-model=${{matrix.addrmd}} variant=debug,release
